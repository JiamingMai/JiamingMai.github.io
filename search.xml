<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>problem-232-Implement-Queue-using-Stacks</title>
      <link href="/2025/02/05/problem-232-Implement-Queue-using-Stacks/"/>
      <url>/2025/02/05/problem-232-Implement-Queue-using-Stacks/</url>
      
        <content type="html"><![CDATA[<h1 id="题目-232-Implement-Queue-using-Stacks"><a href="#题目-232-Implement-Queue-using-Stacks" class="headerlink" title="题目: 232. Implement Queue using Stacks"></a>题目: 232. Implement Queue using Stacks</h1><p>题目地址：<a href="https://leetcode.com/problems/implement-queue-using-stacks" target="_blank" rel="noopener">https://leetcode.com/problems/implement-queue-using-stacks</a></p><p>Implement the following operations of a queue using stacks.</p><ul><li><code>push(x)</code> — Push element x to the back of queue.</li><li><code>pop()</code> — Removes the element from in front of queue.</li><li><code>peek()</code> — Get the front element.</li><li><code>empty()</code> — Return whether the queue is empty.<br>Example:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);  </span><br><span class="line">queue.peek();  <span class="comment">// returns 1</span></span><br><span class="line">queue.pop();   <span class="comment">// returns 1</span></span><br><span class="line">queue.empty(); <span class="comment">// returns false</span></span><br></pre></td></tr></table></figure>Notes:</li><li>You must use <strong>only</strong> standard operations of a stack — which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li><li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li><li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2>读完题之后，第一步必然要想清楚栈和队列的区别，如下图所示，栈和队列的基本实现其实都可以看作一个 list：</li></ul><p>1）那如果是栈的话，[1, 2, 3] 入栈之后，指针会指向 3，出栈的时候就会 pop 这个 list 里的 3；</p><p>2）如果是队列的话，[1, 2, 3] 入队之后，指针会指向 1，出队的时候就会 pop 这个 list 里的 1。</p><p>也就是说如果是栈，这个 list 里从上到下会是 [3, 2, 1]，而如果是队列，则是 [1, 2, 3]。因此，问题就转化为：怎么将一个插入之后会变成 [3, 2, 1] 的 list 变成插入之后是 [1, 2, 3]。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig1.png" alt="Fig1"></p><p>这个问题一下子很难找到答案，我们退一步思考另外一个问题：假如现在已经是 [1, 2, 3]，现在要将 4 这个元素插入到这个 list 里面，怎么才能保持 [1, 2, 3, 4]？（正如下图所示）</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig2.png" alt="Fig2"></p><p>为了解决这个问题，就需要将 4 插入到这个 list 的底部（而不能直接插入到顶部），那什么情况下 4 才能插入到底部？注意到这个 list 是一个栈，只有这个栈是空栈的情况下，4 才有可能插入到底部。所以，我们要构造出空栈的情况，那如果要将一个非空的栈变成空栈，势必要 pop 元素，而且这些元素还必须保存起来，不能丢弃，所以必然要有一个地方，必然要有另外一个数据结构来存储这些 pop 出来的元素。</p><p>基于上面的思考过程，我们自然会想到额外再使用一个栈</p><p>来存储这些 pop 出来的元素，如下图所示。将主栈 stack2 的元素逐一 pop 出来并且 push 到辅助栈 stack1 中，就可以清空主栈，让它变成一个空栈。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig3.png" alt="Fig3"></p><p>这样一来，主栈就可以将新的元素 4 放入到底部。与此同时，因为元素进入辅助栈 stack1 之后，顺序变成了逆序 [3, 2, 1]，所以当这些元素再 pop 出来导到主栈 stack2 时，又会跟原来的顺序 [1, 2, 3] 一样。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig4.png" alt="Fig4"></p><p>至此，整个算法的逻辑就清晰了，我们来重新过一遍。首先，当主栈 stack2 没有元素的时候，那就直接放入主栈 stack2 即可。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig5.png" alt="Fig5"></p><p>接下来会进来第二个元素 2，那就按照如下的步骤走：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig6.png" alt="Fig6"></p><p>当新元素 3 要插入的时候，继续这个操作即可：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-232-Implement-Queue-using-Stacks/fig7.png" alt="Fig7"></p><p>可以看到，通过这种方法，可以始终保持主栈是以队列的顺序存储元素（参考本文的第一幅图）。至于 pop 和 peek 方法，都只要直接对主栈 stack2 进行判断和处理就可以了。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>按照上面的解法，队列的各种基本操作的时间复杂度分别为：</p><p>push 操作：整个过程需要将元素从主栈 stack2 挪到辅助栈 stack1（这一步的时间复杂度是 O (n)），然后插入新元素（时间复杂度 O (1)），最后再挪回主栈 stack2（时间复杂度 O (n)），所以时间复杂度是 O (2n+1)，等于 O (n)</p><p>pop 操作：因为只需要对主栈 stack2 做判断，所以只需要 O (1)</p><p>peek 操作：因为只需要对主栈 stack2 做判断，所以只需要 O (1)</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> LinkedList&lt;Integer&gt; stack1 = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// the aux one</span></span><br><span class="line">        <span class="keyword">private</span> LinkedList&lt;Integer&gt; stack2 = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// the true one</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Push element x to the back of queue.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">                stack2.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">                    stack1.push(stack2.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                stack2.push(x);</span><br><span class="line">                <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                    stack2.push(stack1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> stack2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Get the front element.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> stack2.peek();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stack2.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Stack-and-Queue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-225-Implement-Stack-using-Queues</title>
      <link href="/2025/02/05/problem-225-Implement-Stack-using-Queues/"/>
      <url>/2025/02/05/problem-225-Implement-Stack-using-Queues/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：225-Implement-Stack-using-Queues"><a href="#题目：225-Implement-Stack-using-Queues" class="headerlink" title="题目：225. Implement Stack using Queues"></a>题目：225. Implement Stack using Queues</h1><p>Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p><p>Implement the <code>MyStack</code> class:</p><ul><li><code>void push(int x)</code> Pushes element x to the top of the stack.</li><li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li><li><code>int top()</code> Returns the element on the top of the stack.</li><li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li></ul><p><strong>Notes:</strong></p><ul><li>You must use <strong>only</strong> standard operations of a queue, which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li><li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue’s standard operations.</li></ul><p><strong>Follow-up:</strong> </p><p>Can you implement the stack such that each operation is <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAmortized_analysis" target="_blank" rel="noopener">amortized</a> O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.</p><p>Example 1:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">"MyStack"</span>, <span class="string">"push"</span>, <span class="string">"push"</span>, <span class="string">"top"</span>, <span class="string">"pop"</span>, <span class="string">"empty"</span>]</span><br><span class="line">[[], [<span class="number">1</span>], [<span class="number">2</span>], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="keyword">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyStack myStack = <span class="keyword">new</span> MyStack();</span><br><span class="line">myStack.push(<span class="number">1</span>);</span><br><span class="line">myStack.push(<span class="number">2</span>);</span><br><span class="line">myStack.top(); <span class="comment">// return 2</span></span><br><span class="line">myStack.pop(); <span class="comment">// return 2</span></span><br><span class="line">myStack.empty(); <span class="comment">// return False</span></span><br></pre></td></tr></table></figure><br>Constraints:</p><p>1 &lt;= x &lt;= 9<br>At most 100 calls will be made to push, pop, top, and empty.<br>All the calls to pop and top are valid.</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>看完题目，第一反应是考虑到栈（stack）和队列（queue）这两样东西的区别，stack 先进后出，queue 先进先出，如下图所示：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-225-Implement-Stack-using-Queues/fig1.png" alt="Fig1"></p><p>上图形象地表示了 stack 和 queue 的区别，stack 从顶上 push 元素，queue 从底下 offer 元素，但对于 pop 操作而言，stack 和 queue 都是从顶上 pop 的，而这一点可以被我们所利用。暂且先把这个想法搁下，再进一步思考，如果往 stack 里分别 push 三个元素 1、2、3 的话，图中反映出来的就是 3、2、1，3 在最上面，而如果往 queue 里面分别 offer 三个元素 1、2、3 的话，反映出来就会是 1、2、3，1 在最上面。显然，如果 queue 里面元素自上而下的顺序是 3、2、1 的话，那它的 pop 就跟 stack 没有区别，所以如果能在 queue 中构造出 3、2、1 这样的元素顺序，就可以满足题目的要求了。</p><p>直接思考将 1、2、3 调整为 3、2、1 这个问题会比较困难，那我们退一步换一个相对简单点的问题进行考虑。假设现在已经是 3、2、1 了，要进来新的元素 4，如何让这个 queue 保持 4、3、2、1 呢？如果直接 offer 4 的话，4 这个元素会被插入到底部，也就会变成 3、2、1、4，这显然不满足要求，如下图所示：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-225-Implement-Stack-using-Queues/fig2.png" alt="Fig2"></p><p>我们意识到一个问题，4 必须要在上面，而不能在底下。为了不让 4 在底下，必须要借助一些辅助的空间或者结构。如果能让 3、2、1 让 4 先排到前面，也就是让 queue 里面先有了 4，这时候只要再把 3、2、1 看作整体，让他们重新排到 4 后面就可以了。如下图所示，只要再多使用一个 queue2 作为辅助空间就可以实现了：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-225-Implement-Stack-using-Queues/fig3.png" alt="Fig3"></p><p>这个时候 queue2 里面的元素顺序满足了要求（4、3、2、1），它 pop 操作的顺序和 stack 的 pop 操作顺序是一样的，满足题目要求。那假设再来一个新的元素 5 怎么办呢？同样的道理，可以将元素导到 queue1 里面，让 queue1 保持满足要求的元素顺序，如下图所示：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-225-Implement-Stack-using-Queues/fig4.png" alt="Fig4"></p><p>至此，我们解决问题的思路已经非常清晰了，唯一需要注意的是，每次插入元素都使得其中一个 queue 为空，而 pop 操作就需要在另外一个 queue 上面执行，因此，pop 操作需要判断哪个 queue 是空的，然后从非空的 queue 里执行 pop 操作，pop 操作的流程图如下图所示：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-225-Implement-Stack-using-Queues/fig5.png" alt="Fig5"></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>按照上面的解法，这个依靠两个 quque 实现的 stack，其各种基本操作的时间复杂度分别为：</p><p>push 操作：整个过程需要先插入新元素（时间复杂度 O (1)），然后再将元素从 queue1 挪到 queue2（这一步的时间复杂度是 O (n)），所以时间复杂度是 O (n+1)，等于 O (n)</p><p>pop 操作：因为只要判断一下 queue1 和 queue2 中的哪个为空，然后 pop 另外一个即可，所以只需要 O (1)</p><p>top 操作：因为只要判断一下 queue1 和 queue2 中的哪个为空，然后 top 另外一个即可，所以只需要 O (1)</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">     * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment">     * obj.push(x);</span></span><br><span class="line"><span class="comment">     * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment">     * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment">     * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Push element x onto stack.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">                queue1.offer(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!queue1.isEmpty()) &#123;</span><br><span class="line">                    queue2.offer(x);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queue1.size(); i++) &#123;</span><br><span class="line">                        queue2.offer(queue1.poll());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!queue2.isEmpty()) &#123;</span><br><span class="line">                    queue1.offer(x);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queue2.size(); i++) &#123;</span><br><span class="line">                        queue1.offer(queue2.poll());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!queue1.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> queue1.poll();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!queue2.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span> queue2.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Get the top element.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!queue1.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> queue1.peek();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!queue2.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span> queue2.peek();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queue1.isEmpty() &amp;&amp; queue2.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyStack obj = <span class="keyword">new</span> MyStack();</span><br><span class="line">        obj.push(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> param_2 = obj.pop();</span><br><span class="line">        <span class="keyword">int</span> param_3 = obj.top();</span><br><span class="line">        <span class="keyword">boolean</span> param_4 = obj.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Stack-and-Queue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-130-Surrounded-Regions</title>
      <link href="/2025/02/05/problem-130-Surrounded-Regions/"/>
      <url>/2025/02/05/problem-130-Surrounded-Regions/</url>
      
        <content type="html"><![CDATA[<p>题目：130. Surrounded Regions<br>题目地址： <a href="https://leetcode.com/problems/surrounded-regions/" target="_blank" rel="noopener">https://leetcode.com/problems/surrounded-regions/</a></p><p>Given a 2D board containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> (<strong>the letter O</strong>), capture all regions surrounded by ‘X’.</p><p>A region is captured by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X O O X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure><br>After running your function, the board should be:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure><br>Explanation:</p><p>Surrounded regions shouldn’t be on the border, which means that any <code>&#39;O&#39;</code> on the border of the board are not flipped to <code>&#39;X&#39;</code>. Any <code>&#39;O&#39;</code> that is not on the border and it is not connected to an <code>&#39;O&#39;</code> on the border will be flipped to <code>&#39;X&#39;</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>参考小土刀的答案 <a href="https://wdxtub.com/interview/14520604919872.html" target="_blank" rel="noopener">https://wdxtub.com/interview/14520604919872.html</a></p><p>Traverse from the border to the inside and mark all the ‘O’s that are not surrounded by ‘X’ as ‘V’ (visited).</p><p>转换一下思路，真的需要开辟一个 map 在存储访问信息吗？其实这个可以省掉的，既然已经知道连通区域必须至少一个元素是在四边，那么一开始直接从四边开始扫描就好了，所以无法 connect 到得元素都是应该被清除的。所以，算法如下：</p><p>从四条边上的 O 元素开始 BFS，所有相连的 O 都赋个新值，比如‘Y’<br>扫描整个数组，所有现存的 O 元素全部置为 X，所有 Y 元素置为 O<br>BFS (queue).</p><p>举例来说，假设有如下的 board<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure><br>那么第一步，先找出四条边上的 O 的位置，然后对它们进行 BFS，并将连通的 O 设为 Y，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X O X</span><br><span class="line">X Y X X</span><br><span class="line">X Y X X</span><br></pre></td></tr></table></figure><br>第二步，在上图的基础上，将所有的 O 改为 X，同时将 Y 改回为 O，至此就完成了，如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>因为最差的情况下，所有图上全为 O，所以 BFS 的时候会遍历整个图，所以时间复杂度为 O (n)，其中 n 为图的元素的个数</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use BFS. The idea refers to https://wdxtub.com/interview/14520604919872.html</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == board) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printBoard(board);</span><br><span class="line">        processBorderRegions(board);</span><br><span class="line">        printBoard(board);</span><br><span class="line">        resetBoard(board);</span><br><span class="line">        printBoard(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBorderRegions</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rowNum = board.length;</span><br><span class="line">        <span class="keyword">int</span> colNum = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// Step 1. do with the top edge</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; colNum; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][col] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                bfsOnPosition(board, <span class="keyword">new</span> Position(<span class="number">0</span>, col));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 2. do with the bottom edge</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; colNum; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[rowNum-<span class="number">1</span>][col] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                bfsOnPosition(board, <span class="keyword">new</span> Position(rowNum-<span class="number">1</span>, col));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 3. do with the left edge</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rowNum; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][<span class="number">0</span>] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                bfsOnPosition(board, <span class="keyword">new</span> Position(row, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 4. do with the right edge</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rowNum; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][colNum-<span class="number">1</span>] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                bfsOnPosition(board, <span class="keyword">new</span> Position(row, colNum-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfsOnPosition</span><span class="params">(<span class="keyword">char</span>[][] board, Position pos)</span> </span>&#123;</span><br><span class="line">        board[pos.row][pos.col] = <span class="string">'Y'</span>;</span><br><span class="line">        LinkedList&lt;Position&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.push(pos.up());</span><br><span class="line">        queue.push(pos.down());</span><br><span class="line">        queue.push(pos.left());</span><br><span class="line">        queue.push(pos.right());</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            pos = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (pos.row &lt; <span class="number">0</span> || pos.row &gt;= board.length || pos.col &lt; <span class="number">0</span> || pos.col &gt;= board[<span class="number">0</span>].length) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (board[pos.row][pos.col] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                board[pos.row][pos.col] = <span class="string">'Y'</span>;</span><br><span class="line">                queue.push(pos.up());</span><br><span class="line">                queue.push(pos.down());</span><br><span class="line">                queue.push(pos.left());</span><br><span class="line">                queue.push(pos.right());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetBoard</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'Y'</span>) &#123;</span><br><span class="line">                    board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBoard</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[][] board = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">        board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">0</span>][<span class="number">3</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">'O'</span>;</span><br><span class="line">        board[<span class="number">1</span>][<span class="number">3</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'O'</span>;</span><br><span class="line">        board[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">2</span>][<span class="number">3</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">3</span>][<span class="number">0</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">3</span>][<span class="number">1</span>] = <span class="string">'O'</span>;</span><br><span class="line">        board[<span class="number">3</span>][<span class="number">2</span>] = <span class="string">'X'</span>;</span><br><span class="line">        board[<span class="number">3</span>][<span class="number">3</span>] = <span class="string">'X'</span>;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        solution.solve(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row;</span><br><span class="line">        <span class="keyword">int</span> col;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Position</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.row = row;</span><br><span class="line">            <span class="keyword">this</span>.col = col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> row;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCol</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.col = col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRow</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.row = row;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Position <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Position(row-<span class="number">1</span>, col);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Position <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Position(row+<span class="number">1</span>, col);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Position <span class="title">left</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Position(row, col-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Position <span class="title">right</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Position(row, col+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Tree-and-Graph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-63-Unique-Paths-II</title>
      <link href="/2025/02/05/problem-63-Unique-Paths-II/"/>
      <url>/2025/02/05/problem-63-Unique-Paths-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：-63-Unique-Paths-II"><a href="#题目：-63-Unique-Paths-II" class="headerlink" title="题目： 63. Unique Paths II"></a>题目： 63. Unique Paths II</h1><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p><p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/fig1.png" alt="Fig1"></p><p>An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p><p>Note: m and n will be at most 100.</p><p>Example 1:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line">Output: <span class="number">2</span></span><br><span class="line">Explanation:</span><br><span class="line">There is one obstacle in the middle of the <span class="number">3</span>x3 grid above.</span><br><span class="line">There are two ways to reach the bottom-right corner:</span><br><span class="line"><span class="number">1</span>. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class="line"><span class="number">2</span>. Down -&gt; Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题是 62. Unique Path 的升级版，相对于 62. Unique Path 来说，只是多了障碍的情况。所以其实解法和 62. Unique Path 类似（参考 <a href="https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/" target="_blank" rel="noopener">https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/</a> ），只是唯一不同的是，将有障碍的地方的 h () 都设为 0，例如假设 (i, j) 这个位置有障碍物，那么 h (i, j)=0，表示 (i, j) 这个位置到达右下角的可行路径数为 0，即到达不了右下角。</p><p>值得注意的是，有一种特殊情况：右下角有障碍物。例如输入的数组为 [[1]]，这个时候应该返回 0，所以要排除这种右下角有障碍物的情况，当右下角有障碍物时，应该直接返回 0，因为无论如何永远无法到达右下角。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>与 62. Unique Path 一样，都为 O (mn)，具体分析过程参考 <a href="https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/" target="_blank" rel="noopener">https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/</a></p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input: [[1]]</span></span><br><span class="line"><span class="comment">// Expected: 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> h[][];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obstacleGrid || obstacleGrid.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">        <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// initialize the two-dimension array h</span></span><br><span class="line">        h = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                h[i][j] = obstacleGrid[i][j] != <span class="number">1</span> ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return 0 because the right-bottom position is blocked</span></span><br><span class="line">        <span class="keyword">if</span> (h[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// set the right-bottom position to 1</span></span><br><span class="line">        h[m-<span class="number">1</span>][n-<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> calcH(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcH</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = h.length;</span><br><span class="line">        <span class="keyword">int</span> n = h[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= m || j &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h[i][j] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> h[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        h[i][j] = calcH(i + <span class="number">1</span>, j) + calcH(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> h[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] obstacleGrid = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                obstacleGrid[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = solution.uniquePathsWithObstacles(obstacleGrid);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-62-Unique-Paths</title>
      <link href="/2025/02/05/problem-62-Unique-Paths/"/>
      <url>/2025/02/05/problem-62-Unique-Paths/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：62-Unique-Paths"><a href="#题目：62-Unique-Paths" class="headerlink" title="题目：62. Unique Paths"></a>题目：62. Unique Paths</h1><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p><p>How many possible unique paths are there?</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-62-Unique-Paths/fig1.png" alt="Fig1"></p><p>Above is a 7 x 3 grid. How many possible unique paths are there?</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: m &#x3D; 3, n &#x3D; 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down</span><br><span class="line">2. Right -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: m &#x3D; 7, n &#x3D; 3</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure><br>Constraints:</p><ul><li>1 &lt;= m, n &lt;= 100</li><li>It’s guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>设 h (i, j) 为从 (i, j) 坐标出发到达右下角的可行路径数，则 h (0, 0) 为题目所求。因为机器人只能够向右或者向下移动，所以可以发现，h (0, 0) 的值取决于 h (0, 1) 和 h (1, 0)，h (0, 0) = h (0, 1) + h (1, 0)。以此类推，对于任何一个位置，它到右下角的可行路径数，都只取决于它的右边一格和下方一格到右下角的可行路径数，即有 h (i, j) = h (i+1, j) + h (i, j+1)。因此，我们可以写出下面的动态规划地推公式：</p><h3 id="动态规划的递推公式："><a href="#动态规划的递推公式：" class="headerlink" title="动态规划的递推公式："></a>动态规划的递推公式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h(i,j) = h(i+<span class="number">1</span>,j) + h(i,j+<span class="number">1</span>) <span class="comment">// 当i+1&lt;=m-1，或j+1&lt;=n-1时</span></span><br><span class="line">h(i,j) = <span class="number">0</span> <span class="comment">// 当i+1&gt;m-1（表示已经处于最右边的那一列格子），或j+1&gt;n-1（表示已经处于最下面的那一行格子）时</span></span><br><span class="line">h(m-<span class="number">1</span>,n-<span class="number">1</span>) = <span class="number">1</span>  <span class="comment">// 表示右下角的格子</span></span><br></pre></td></tr></table></figure><p>接下来按照上述递推公式求出 h (0,0) 即可。</p><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>从最右下角开始考虑，最右下角的位置是 h (m-1, n-1)，那么右下角往上一个格子 h (m-2, n-1)=h (m-1, n-1)+h (m-2, n)，因为 h (m-2, n) 已经超出范围，所以 h (m-2, n)=0，只需要考虑 h (m-1, n-1)，这一步就相当于在计算 h (m-1, n-1) 的基础上增加 O (1) 的时间复杂度。同样地，h (m-1, n-2) 也是在 h (m-1, n-1) 的基础上增加 O (1) 的时间复杂度。更进一步地，h (m-2, n-2)=h (m-2, n-1)+h (m-1, n-2)，由于 h (m-2, n-1) 和 h (m-1, n-2) 已经被算过一次，所以无须再作计算，所以 h (m-2, n-2) 是在 h (m-2, n-1) 和 h (m-1, n-2) 的基础上增加 O (1) 的时间复杂度。由此可见，h (i, j) 是在 h (i+1,j) 和 h (i,j+1) 的基础上增加 O (1) 的时间复杂度，而 h (i, j) 首次计算出来之后可以保存起来，这样一来就没有了重复计算的过程，最终的时间复杂度取决于格子的总个数，即为 O (mn)。</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> h[][];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// initialize the two-dimension array h</span></span><br><span class="line">        h = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                h[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// set the right-bottom position to 1</span></span><br><span class="line">        h[m-<span class="number">1</span>][n-<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> calcH(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcH</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = h.length;</span><br><span class="line">        <span class="keyword">int</span> n = h[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= m || j &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h[i][j] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> h[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        h[i][j] = calcH(i + <span class="number">1</span>, j) + calcH(i, j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> h[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (m == -<span class="number">1</span> || n == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> res = solution.uniquePaths(m, n);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-93-Restore-IP-Addresses</title>
      <link href="/2025/02/05/problem-93-Restore-IP-Addresses/"/>
      <url>/2025/02/05/problem-93-Restore-IP-Addresses/</url>
      
        <content type="html"><![CDATA[<h1 id="题目-93-Restore-IP-Addresses"><a href="#题目-93-Restore-IP-Addresses" class="headerlink" title="题目: 93. Restore IP Addresses"></a>题目: 93. Restore IP Addresses</h1><p>Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.</p><p>A valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, “0.1.2.201” and “192.168.1.1” are valid IP addresses and “0.011.255.245”, “192.168.1.312” and “192.168@1.1” are invalid IP addresses.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;25525511135&quot;</span><br><span class="line">Output: [&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;0000&quot;</span><br><span class="line">Output: [&quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;1111&quot;</span><br><span class="line">Output: [&quot;1.1.1.1&quot;]</span><br></pre></td></tr></table></figure><br>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;010010&quot;</span><br><span class="line">Output: [&quot;0.10.0.10&quot;,&quot;0.100.1.0&quot;]</span><br></pre></td></tr></table></figure><br>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;101023&quot;</span><br><span class="line">Output: [&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]</span><br></pre></td></tr></table></figure><br>Constraints:</p><ul><li>0 &lt;= s.length &lt;= 3000</li><li>s consists of digits only.<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2>首先既然要验证的是一个 IP 地址，那就意味着这个给定的字符串一定不能超过 12 个字符，因为如果超过 12 个字符就不可能是 IP 地址。在此基础上，这个给定的字符串最多只有 12 个字符，要让一个字符串对应的可能的 IP 地址，就要穷举出所有的情况，然后逐个验证。穷举的方式相当于往字符之间的（顶多）11 个空位中添加 3 个点，一共有 C^3_11 种加点的方式。例如，25525511135 的所有可能情况如下所示，只要剔除不可能的情况即可：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">2.5.5.25511135</span><br><span class="line">2.5.52.5511135</span><br><span class="line">2.5.525.511135</span><br><span class="line">2.5.5255.11135</span><br><span class="line">2.5.52551.1135</span><br><span class="line">2.5.525511.135</span><br><span class="line">2.5.5255111.35</span><br><span class="line">2.5.52551113.5</span><br><span class="line">2.55.2.5511135</span><br><span class="line">2.55.25.511135</span><br><span class="line">2.55.255.11135</span><br><span class="line">2.55.2551.1135</span><br><span class="line">2.55.25511.135</span><br><span class="line">2.55.255111.35</span><br><span class="line">2.55.2551113.5</span><br><span class="line">2.552.5.511135</span><br><span class="line">2.552.55.11135</span><br><span class="line">2.552.551.1135</span><br><span class="line">2.552.5511.135</span><br><span class="line">2.552.55111.35</span><br><span class="line">2.552.551113.5</span><br><span class="line">2.5525.5.11135</span><br><span class="line">2.5525.51.1135</span><br><span class="line">2.5525.511.135</span><br><span class="line">2.5525.5111.35</span><br><span class="line">2.5525.51113.5</span><br><span class="line">2.55255.1.1135</span><br><span class="line">2.55255.11.135</span><br><span class="line">2.55255.111.35</span><br><span class="line">2.55255.1113.5</span><br><span class="line">2.552551.1.135</span><br><span class="line">2.552551.11.35</span><br><span class="line">2.552551.113.5</span><br><span class="line">2.5525511.1.35</span><br><span class="line">2.5525511.13.5</span><br><span class="line">2.55255111.3.5</span><br><span class="line">25.5.2.5511135</span><br><span class="line">25.5.25.511135</span><br><span class="line">25.5.255.11135</span><br><span class="line">25.5.2551.1135</span><br><span class="line">25.5.25511.135</span><br><span class="line">25.5.255111.35</span><br><span class="line">25.5.2551113.5</span><br><span class="line">25.52.5.511135</span><br><span class="line">25.52.55.11135</span><br><span class="line">25.52.551.1135</span><br><span class="line">25.52.5511.135</span><br><span class="line">25.52.55111.35</span><br><span class="line">25.52.551113.5</span><br><span class="line">25.525.5.11135</span><br><span class="line">25.525.51.1135</span><br><span class="line">25.525.511.135</span><br><span class="line">25.525.5111.35</span><br><span class="line">25.525.51113.5</span><br><span class="line">25.5255.1.1135</span><br><span class="line">25.5255.11.135</span><br><span class="line">25.5255.111.35</span><br><span class="line">25.5255.1113.5</span><br><span class="line">25.52551.1.135</span><br><span class="line">25.52551.11.35</span><br><span class="line">25.52551.113.5</span><br><span class="line">25.525511.1.35</span><br><span class="line">25.525511.13.5</span><br><span class="line">25.5255111.3.5</span><br><span class="line">255.2.5.511135</span><br><span class="line">255.2.55.11135</span><br><span class="line">255.2.551.1135</span><br><span class="line">255.2.5511.135</span><br><span class="line">255.2.55111.35</span><br><span class="line">255.2.551113.5</span><br><span class="line">255.25.5.11135</span><br><span class="line">255.25.51.1135</span><br><span class="line">255.25.511.135</span><br><span class="line">255.25.5111.35</span><br><span class="line">255.25.51113.5</span><br><span class="line">255.255.1.1135</span><br><span class="line">255.255.11.135</span><br><span class="line">255.255.111.35</span><br><span class="line">255.255.1113.5</span><br><span class="line">255.2551.1.135</span><br><span class="line">255.2551.11.35</span><br><span class="line">255.2551.113.5</span><br><span class="line">255.25511.1.35</span><br><span class="line">255.25511.13.5</span><br><span class="line">255.255111.3.5</span><br><span class="line">2552.5.5.11135</span><br><span class="line">2552.5.51.1135</span><br><span class="line">2552.5.511.135</span><br><span class="line">2552.5.5111.35</span><br><span class="line">2552.5.51113.5</span><br><span class="line">2552.55.1.1135</span><br><span class="line">2552.55.11.135</span><br><span class="line">2552.55.111.35</span><br><span class="line">2552.55.1113.5</span><br><span class="line">2552.551.1.135</span><br><span class="line">2552.551.11.35</span><br><span class="line">2552.551.113.5</span><br><span class="line">2552.5511.1.35</span><br><span class="line">2552.5511.13.5</span><br><span class="line">2552.55111.3.5</span><br><span class="line">25525.5.1.1135</span><br><span class="line">25525.5.11.135</span><br><span class="line">25525.5.111.35</span><br><span class="line">25525.5.1113.5</span><br><span class="line">25525.51.1.135</span><br><span class="line">25525.51.11.35</span><br><span class="line">25525.51.113.5</span><br><span class="line">25525.511.1.35</span><br><span class="line">25525.511.13.5</span><br><span class="line">25525.5111.3.5</span><br><span class="line">255255.1.1.135</span><br><span class="line">255255.1.11.35</span><br><span class="line">255255.1.113.5</span><br><span class="line">255255.11.1.35</span><br><span class="line">255255.11.13.5</span><br><span class="line">255255.111.3.5</span><br><span class="line">2552551.1.1.35</span><br><span class="line">2552551.1.13.5</span><br><span class="line">2552551.11.3.5</span><br><span class="line">25525511.1.3.5</span><br></pre></td></tr></table></figure>针对每种情况 c，将它分割为 4 个部分，比如 2.5.5.25511135 被分割为 2、5、5、25511135，接下来对每个部分做判断。设其中一个部分的字符串为 x，则只需要判断它是否满足以下两个条件，如果不满足则 c 这种情况就不是合法 IP 地址（在这个例子中是 2.5.5.25511135）：</li></ul><p>1）x 不能大于 255；</p><p>2）x 如果不等于 0 的话，它的第一个字符不能为 0，比如 02 这种就是不满足的。</p><p>只有 4 个部分（2、5、5、25511135）都满足了上述两个条件，才算是合法的 IP 地址。对于上面的例子而言，所有情况里面就只有以下两个才是合法的 IP 地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">255.255.11.135</span><br><span class="line">255.255.111.35</span><br></pre></td></tr></table></figure></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>无论初始给定的字符串长度是多少，一共最多只有 C^3_11=165 种加点的方式，所以时间复杂度为 O (165)=O (1)</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; candidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// Step 1. Select all probable slots</span></span><br><span class="line">        List&lt;Position&gt; positions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; s.length(); k++) &#123;</span><br><span class="line">                    Position pos = <span class="keyword">new</span> Position(i, j, k);</span><br><span class="line">                    positions.add(pos);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 2. Add dot to the given string</span></span><br><span class="line">        <span class="keyword">for</span> (Position pos : positions) &#123;</span><br><span class="line">            StringBuffer buffer = <span class="keyword">new</span> StringBuffer(s);</span><br><span class="line">            buffer.insert(pos.getZ(), <span class="string">"."</span>);</span><br><span class="line">            buffer.insert(pos.getY(), <span class="string">"."</span>);</span><br><span class="line">            buffer.insert(pos.getX(), <span class="string">"."</span>);</span><br><span class="line">            String candidate = buffer.toString();</span><br><span class="line">            <span class="keyword">if</span> (isValidIpAddress(candidate)) &#123;</span><br><span class="line">                candidates.add(candidate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValidIpAddress</span><span class="params">(String ipAddress)</span> </span>&#123;</span><br><span class="line">        String[] blocks = ipAddress.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span> (String block : blocks) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Integer.valueOf(block) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (block.startsWith(<span class="string">"0"</span>) &amp;&amp; block.length() != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Position</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.z = z;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> z;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZ</span><span class="params">(<span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.z = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-213-House-Robber-II</title>
      <link href="/2025/02/05/problem-213-House-Robber-II/"/>
      <url>/2025/02/05/problem-213-House-Robber-II/</url>
      
        <content type="html"><![CDATA[<h1 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a>213. House Robber II</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You cannot rob house 1 (money &#x3D; 2) and then rob house 3 (money &#x3D; 2), because they are adjacent houses.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><br>Constraints:</p><ul><li>1 &lt;= nums.length &lt;= 100</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题是 198 题 House Robber 的升级版，唯一不同的地方是，这道题的房子是首尾相连的，也就是说数组在逻辑上是环状的。与 198. House Robber 相比，它难点就在于难以确定一个起点，因为无论从哪个位置开始，它的左边始终是有跟它相连的房子（或者说元素），这导致了动态规划的初始式没有办法确定，似乎直接使用之前 198. House Robber 的方法行不通了。</p><p>但仔细想一下可以发现，其实首尾相连的情况可以拆解成两种固定的情况，假设数组长度为 n，这里还是以数组中的第一个位置为起点，因为最后一个元素和第一个元素相连，所以我们不能把最后一个元素也计算上，所以此时问题变成了求解 h (n-1)。然而，这样一来没有考虑到一种特殊情况，会不会当最后一个元素计算上，而第一个元素不被计算上的时候，偷窃的总价值最大的呢？所以，为了把这种情况也考虑上，只需要将第一个元素剔除，然后从第二个元素开始计算 h (n) 即可。那么总结下来，解这道题其实只需要沿用 198. House Robber 的方式，计算出以下两个数组的 h (k) 值然后选出它们中的最大值即可，其中 k 为数组最后一个元素的索引:</p><p>1) nums[0 : nums.length - 2]</p><p>2) nums[1: nums.length - 1]</p><p>最后，从这道题中，我们发现了一种规律，凡是涉及到首尾相连环状数组的题目，都可以通过拆解成如上面所示的两段数组来解决。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>因为计算 h (i) 的时间复杂度为 O (1)，而最终的时间复杂度为 2h (n)，所以所需的时间复杂度为 2 O(n)=O (n)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>由于只使用了一个与 nums 数组长度相同的 h 数组（长度为 n），因此空间复杂度为 O (n)。</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">robInternal</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        h[low] = nums[low];</span><br><span class="line">        <span class="keyword">int</span> maxHValue = h[low];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = low + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> hValue = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">2</span> &gt;= low) &#123;</span><br><span class="line">                hValue = nums[i] + h[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (h[i - <span class="number">1</span>] &gt; hValue) &#123;</span><br><span class="line">                hValue = h[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            h[i] = hValue;</span><br><span class="line">            <span class="keyword">if</span> (h[i] &gt; maxHValue) &#123;</span><br><span class="line">                maxHValue = h[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxHValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (nums.length - <span class="number">2</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maxValue = robInternal(nums, <span class="number">0</span>, nums.length - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxValue2 = robInternal(nums, <span class="number">1</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (maxValue2 &gt; maxValue) &#123;</span><br><span class="line">                maxValue = maxValue2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-198-House-Robber</title>
      <link href="/2025/02/05/problem-198-House-Robber/"/>
      <url>/2025/02/05/problem-198-House-Robber/</url>
      
        <content type="html"><![CDATA[<h1 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a>198. House Robber</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 2), rob house 3 (money &#x3D; 9) and rob house 5 (money &#x3D; 1).</span><br><span class="line">Total amount you can rob &#x3D; 2 + 9 + 1 &#x3D; 12.</span><br></pre></td></tr></table></figure><br>Constraints:</p><ul><li>1 &lt;= nums.length &lt;= 100</li><li>0 &lt;= nums[i] &lt;= 400</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>乍一看这个问题很复杂，有很多种组合可能，要算出每一种可能的情况然后做对比。但不妨先从最简单的情况来考虑问题，假设数组 nums 中只有 1 个元素，那么显然结果就是 nums [0]，假设数组中有 2 个元素，那就比较第 1 个数和第 2 个数，输出最大的数。当数组有 3 个元素时，我们需要比较 nums [2] + nums [0] 和 nums [1]，并输出其中较大的值。当数组有 4 个元素时，我们需要比较 nums [2] + nums [0] 和 nums [3] + nums [1]；当数组有 5 个元素是比较 nums [4] + nums [2] + nums [0] 和 nums [3] + nums [1]；如此类推。<br>我们发现，如果假设 h (i) 是从 0 到 i 中可以获得的最大价值，由于不能同时偷窃相邻的房子，所以就可以推出 h (i) = max (nums [i] + h (i - 2), h (i-1))，其中 h (0) = nums [0] 而当数组长度为 n 时，h (n) 就是题目需要我们求解的答案。这就是本题的动态规划递推式。只要按照顺序求出 h (1), h (2),…,h (n) 即可得到答案。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>因为计算 h (i) 的时间复杂度为 O (1)，所以最终计算 h (n) 所需的时间复杂度为 O (n)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>由于只使用了一个与 nums 数组长度相同的 h 数组（长度为 n），因此空间复杂度为 O (n)。</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        h[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxHValue = h[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; h.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> hValue = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">2</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                hValue = nums[i] + h[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (h[i - <span class="number">1</span>] &gt; hValue) &#123;</span><br><span class="line">                hValue = h[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            h[i] = hValue;</span><br><span class="line">            <span class="keyword">if</span> (h[i] &gt; maxHValue) &#123;</span><br><span class="line">                maxHValue = h[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxHValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-45-Jump-Game-II</title>
      <link href="/2025/02/05/problem-45-Jump-Game-II/"/>
      <url>/2025/02/05/problem-45-Jump-Game-II/</url>
      
        <content type="html"><![CDATA[<h1 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a>45. Jump Game II</h1><p>Given an array of non-negative integers nums, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Your goal is to reach the last index in the minimum number of jumps.</p><p>You can assume that you can always reach the last index.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,0,1,4]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br>Constraints:</p><ul><li>1 &lt;= nums.length &lt;= 104</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题是在 Problem 55 的基础上计算最优步数 （Problem 55 的详解参考 <a href="https://jiamingmai.github.io/2025/02/05/problem-139-Word-Break/" target="_blank" rel="noopener">https://jiamingmai.github.io/2025/02/05/problem-139-Word-Break/</a>). 在 Problem 55 中，flags 数组用于记录数组每个位置的元素是否可以到达最后一个节点，如果可达则元素的值（即 flags [i]）为 1，否则为 0。而对于本题，只需要进一步在 flags 数组中记录每个元素到达最后一个节点所需的步数即可，例如，对于输入数组 nums [2, 3, 1, 1, 4] 而言，flags 数组则为 [2, 3, 2, 1, 0]，不可达的时候用 Integer.MAX_VALUE 记录即可。</p><p>那 flags 数组的元素值如何计算呢？</p><p>对于倒数第二个节点，只有 2 种可能，可达与否，所以它只能是 1 或者 Integer.MAX_VALUE。</p><p>对于倒数第三个节点，有 3 种可能：</p><ol><li>本身是否直接可以达到最后一个节点，如果是则为 1；</li><li>在它右边的节点（对于倒数第三个节点来说，除去最后一个节点外，它右边的节点就只有 1 个，即倒数第二个节点）到达最后一个节点所需的最少步数加 1；</li><li>不可达，值为 <code>Integer.MAX_VALUE</code>。</li></ol><p>对于倒数第四个节点，有 4 种可能：</p><ol><li>本身是否直接可以达到最后一个节点，如果是则为 1；</li><li>在它右边的节点（倒数第三个节点和倒数第二个节点）到达最后一个节点所需的最少步数加 1（可以表示为 min (flags [倒数第 3], flags [倒数第 2]) + 1）；</li><li>不可达，值为 <code>Integer.MAX_VALUE</code>。</li></ol><p>如此类推。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度与 Problem 55 一样，O (n^2)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>由于只使用了一个长度为 n 的 flags 数组，因此空间复杂度与 Problem 55 一样，同为 O (n)</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[] example1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] example2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] example3 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> step = solution.jump(example1);</span><br><span class="line">        System.out.println(step);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] flags = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flags.length; i++) &#123;</span><br><span class="line">            flags[i] = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        flags[nums.length - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">2</span>, k = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (num &gt; k) &#123;</span><br><span class="line">                flags[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> canJump = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> step = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = num; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flags[i + j] &lt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                    canJump = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (flags[i + j] + <span class="number">1</span> &lt; step) &#123;</span><br><span class="line">                        step = flags[i + j] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (canJump) &#123;</span><br><span class="line">                flags[i] = step;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flags[i] = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flags[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-140-Word-Break-II</title>
      <link href="/2025/02/05/problem-140-Word-Break-II/"/>
      <url>/2025/02/05/problem-140-Word-Break-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：140-Word-Break-II-（单词拆解-2）"><a href="#题目：140-Word-Break-II-（单词拆解-2）" class="headerlink" title="题目：140. Word Break II （单词拆解 2）"></a>题目：140. Word Break II （单词拆解 2）</h1><p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.</p><p>Note:</p><ul><li>The same word in the dictionary may be reused multiple times in the segmentation.</li><li>You may assume the dictionary does not contain duplicate words.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;</span><br><span class="line">catsanddog</span><br><span class="line">&quot;</span><br><span class="line">wordDict &#x3D;</span><br><span class="line">[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">&quot;cats and dog&quot;,</span><br><span class="line">&quot;cat sand dog&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;pineapplepenapple&quot;</span><br><span class="line">wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">&quot;pine apple pen apple&quot;,</span><br><span class="line">&quot;pineapple pen apple&quot;,</span><br><span class="line">&quot;pine applepen apple&quot;</span><br><span class="line">]</span><br><span class="line">Explanation: Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;catsandog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output:</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题的解法其实跟 139. Word Break 一样，可以参考 139. Word Break 的思路 <a href="https://my.oschina.net/JiamingMai/blog/4331735" target="_blank" rel="noopener">https://my.oschina.net/JiamingMai/blog/4331735</a> ，与 139. Word Break 稍有不同的是，这道题需要在此基础上将 h [0][i] 为 true 的所有情况记录起来。</p><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>本质与 139. Word Break 一样，所以时间复杂度也是 O (kn^2)，分析过程参考 <a href="https://my.oschina.net/JiamingMai/blog/4331735" target="_blank" rel="noopener">https://my.oschina.net/JiamingMai/blog/4331735</a></p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt;[] records;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] r;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (!fastWordBreakInternal(s, wordDict)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> res = wordBreakInternal(s, wordDict);</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="keyword">return</span> records[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">fastWordBreakInternal</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        h = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        r = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        initR(n, s, wordDict);</span><br><span class="line">        h[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!h[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                    h[<span class="number">0</span>][i] = h[<span class="number">0</span>][i-j] &amp;&amp; r[i-j][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h[<span class="number">0</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreakInternal</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        h = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        r = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        records = <span class="keyword">new</span> List[n + <span class="number">1</span>];</span><br><span class="line">        initR(n, s, wordDict);</span><br><span class="line">        h[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (h[<span class="number">0</span>][i - j] &amp;&amp; r[i - j][i]) &#123;</span><br><span class="line">                    h[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">                    record(i, j, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h[<span class="number">0</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == records[i]) &#123;</span><br><span class="line">            records[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        String token = s.substring(i - j, i);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != records[i - j]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : records[i - j]) &#123;</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                sb.append(str).append(<span class="string">" "</span>).append(token);</span><br><span class="line">                records[i].add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">            records[i].add(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initR</span><span class="params">(<span class="keyword">int</span> n, String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                r[i][j] = r(i, j, s, wordDict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">r</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        String token = s.substring(i, j);</span><br><span class="line">        <span class="keyword">for</span> (String word : wordDict) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word.equals(token)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; wordDict = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        wordDict.add(<span class="string">"a"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaaaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaaaaaa"</span>);</span><br><span class="line">        wordDict.add(<span class="string">"aaaaaaaaaa"</span>);</span><br><span class="line">        String s = <span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        List&lt;String&gt; res = solution.wordBreak(s, wordDict);</span><br><span class="line">        res.stream().forEach(str -&gt; &#123;System.out.println(str);&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意到代码 main 方法里面的那个例子，输入是一大串连续的 a 只有中间一个 b，这种情况如果直接边算边记录的话会超时，所以这里有个 trick 就是先快速判断输入的字符串能否拆解，如果不能就直接输出一个空的 List 即可，这个例子正好就是不能拆解的 case。</strong></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-139-Word-Break</title>
      <link href="/2025/02/05/problem-139-Word-Break/"/>
      <url>/2025/02/05/problem-139-Word-Break/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：139-Word-Break（单词拆分）"><a href="#题目：139-Word-Break（单词拆分）" class="headerlink" title="题目：139. Word Break（单词拆分）"></a>题目：139. Word Break（单词拆分）</h1><p>原题地址：  <a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener">https://leetcode.com/problems/word-break/</a></p><p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.</p><p>Note:</p><ul><li>The same word in the dictionary may be reused multiple times in the segmentation.</li><li>You may assume the dictionary does not contain duplicate words.<br>Example 1:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br></pre></td></tr></table></figure></li></ul><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一道动态规划的题目，设字符串的长度为 n，则：</p><ol><li><p>令 h (i, j) 表示字符串 s 下标为 i 到 j-1 的子串（对应 Java 里面的 <code>s.substring (i, j)</code>）是否可被拆解 (注意到 h (0, n+1) 就是最终要求的结果 )</p></li><li><p>令 r (i, j) 表示 wordDict 中是否有 word 与字符串 s 下标为 i 到 j-1 的子串匹配</p></li></ol><p>定义了 h 和 r 之后，就可以写出动态规划的递推公式了。</p><p>动态规划的递推公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h(0,0) &#x3D; true</span><br><span class="line">h(0,1) &#x3D; h(0,0) &amp;&amp; r(0,1)</span><br><span class="line">h(0,2) &#x3D; ((h(0,0) &amp;&amp; r(0,2)) || (h(0,1) &amp;&amp; r(1,2))</span><br><span class="line">...</span><br><span class="line">h(0,i) &#x3D; ((h(0,0) &amp;&amp; r(0,i)) || ... || (h(0,i-k) &amp;&amp; r(k,i)) || ... || ((h(0,i-1) &amp;&amp; r(i-1,i))</span><br></pre></td></tr></table></figure><br>h (0, n+1) 就是最终要求的结果</p><p>下面以 n=7 为例，用图解的方式直观地解释上面动态规划地推公式：</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-139-Word-Break/fig1.png" alt="Fig1"><br><img src="https://jiamingmai.github.io/2025/02/05/problem-139-Word-Break/fig2.png" alt="Fig2"><br><img src="https://jiamingmai.github.io/2025/02/05/problem-139-Word-Break/fig3.png" alt="Fig3"></p><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>每次 r 的操作时间复杂度为 O(k)，k 是字段中字符串的个数。设 h (0,i) 复杂度为 O (h (0,i))，则有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O(h(0,1))&#x3D;O(h(0,0)) + O(r(0,1))&#x3D; 0 + O(k)&#x3D;O(k)</span><br><span class="line">O(h(0,2))&#x3D;O(h(0,1)) + O(r(1,2)) + O(h(0,0)) + O(r(0,2)) &#x3D;O(2k) + O(k)</span><br></pre></td></tr></table></figure><br>更进一步地，有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(h(0,n))&#x3D;O(nk) + O((n-1)k) + ... +O(k)</span><br></pre></td></tr></table></figure><br>利用等差数列前 n 项和公式求得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(nk) + O((n-1)k) + ... +O(k)&#x3D;O(k(n+n(n-1)&#x2F;2))&#x3D;O(kn^2)</span><br></pre></td></tr></table></figure></p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] r;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        h = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        r = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        initR(n, s, wordDict);</span><br><span class="line">        h[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!h[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                    h[<span class="number">0</span>][i] = h[<span class="number">0</span>][i-j] &amp;&amp; r[i-j][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h[<span class="number">0</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initR</span><span class="params">(<span class="keyword">int</span> n, String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                r[i][j] = r(i, j, s, wordDict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">r</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        String token = s.substring(i, j);</span><br><span class="line">        <span class="keyword">for</span>(String word : wordDict) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word.equals(token)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-263-Ugly-Number</title>
      <link href="/2025/02/05/problem-263-Ugly-Number/"/>
      <url>/2025/02/05/problem-263-Ugly-Number/</url>
      
        <content type="html"><![CDATA[<h1 id="problem-263-Ugly-Number"><a href="#problem-263-Ugly-Number" class="headerlink" title="problem-263-Ugly-Number"></a>problem-263-Ugly-Number</h1><p>题目地址：<a href="https://leetcode.com/problems/ugly-number/" target="_blank" rel="noopener">https://leetcode.com/problems/ugly-number/</a></p><p>Write a program to check whether a given number is an ugly number.</p><p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 6</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 6 &#x3D; 2 × 3</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 8</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 8 &#x3D; 2 × 2 × 2</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: 14</span><br><span class="line">Output: false</span><br><span class="line">Explanation:</span><br><span class="line">14 is not ugly since it includes another prime factor 7.</span><br></pre></td></tr></table></figure><br>Note: </p><ul><li>1 is typically treated as an ugly number.</li><li>Input is within the 32-bit signed integer range: [−231,  231 − 1].</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解决-ugly-number-的原题："><a href="#解决-ugly-number-的原题：" class="headerlink" title="解决 ugly number 的原题："></a>解决 ugly number 的原题：</h3><p>已经被 leetcode 更新过，原题和上面的描述类似，但原题应该稍微更容易想一些。因此在解上面道题之前，让我们先来看看原题的解法，原题是这样的：它跟上面这道题只有唯一一个不同的地方，那就是输入 k，然后要我们求出第 k 个（或者可以理解为第 k 小的）ugly number。</p><p>我们先看看第一个 ugly number 是什么呢？题目已经说了，是 1。注意到接下来的 ugly number 可以通过用 2, 3, 5 乘以前面的 ugly number 得到。现在 ugly number 的序列里面已经有一个 1 了，设这个 ugly number 的序列为 uglyNums，则现在有 uglyNums=[1]，所以那第二个 ugly number 就看三个质因素 (prime factors) 2, 3, 5 乘以 1 得到的值哪个最小，发现 2<em>1=2 最小，所以第二个 ugly number 也就是 2 了，现在 uglyNums=[1, 2]，如下图所示。由于 2</em>1=2 已经被记录到 uglyNums 里面了，所以接下来与 2 这个质因数相乘得到的 ugly number 应该是 2<em>2=4，也就是要让 2 乘以列表中已记录的下一个 ugly number 才有意义了。如此类推，下一个 uglyNums 应该是 3 了，因为在 {3</em>1=3, 5<em>1=5, 2</em>2=4} 里面，3*1=3 最小，uglyNums 更新为 [1, 2, 3]，同样地，质因素 3 要指向它对应的下一个 ugly number，即 uglyNums [1]=2。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-263-Ugly-Number/fig1.png" alt="Fig1"></p><p>重复这个过程，可以得到 uglyNums=[1, 2, 3, 4, 5]，如下面第一幅图所示。注意到会出现一种情况：两个质因素乘以不同 ugly number 得出相同的值。例如我们看下第二幅图，3<em>2=6，同时又有 2</em>3=6，这时候因为它们都比 5*2=10 小，所以它们同时最小，uglyNums 的下一个 ugly number（即 uglyNums [5]）设为 6，同时要让 3 和 2 都与它们对应的下一个 ugly number 相乘，质因素将 3 和 2 分别与 uglyNums [2] 和 uglyNums [3] 相乘，如最后一幅图所示。</p><p><img src="https://jiamingmai.github.io/2025/02/05/problem-263-Ugly-Number/fig2.png" alt="Fig2"></p><p>至此，ugly number 的原题就被解决掉了。写程序的时候要注意第一个 ugly number 是 1，要作为特殊条件判断一下。接下来解决现在的题目：263. Ugly Number <a href="https://leetcode.com/problems/ugly-number/" target="_blank" rel="noopener">https://leetcode.com/problems/ugly-number/</a></p><h3 id="解决现在的题目-263-Ugly-Number："><a href="#解决现在的题目-263-Ugly-Number：" class="headerlink" title="解决现在的题目 263. Ugly Number："></a>解决现在的题目 263. Ugly Number：</h3><p>现在的题目是：给定一个数，判断它是不是 ugly number。设这个给定的数是 n，首先考虑到小于 x 的数不可能多于 n 个（更准确地说，小于 n 的 ugly number 个数不超过 n 个），因此，只要生成 k (令 k=n) 个 ugly number，再判断一下这 n 个 ugly number 里面有没有包含 n 即可，如果包含则说明 n 是 ugly number，否则就不是 ugly number。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>按照上面的解法，本题的时间复杂度实际上等于生成 n 个 ugly number 的时间复杂度，设质因数的个数 m，则生成 n 个 ugly number 的时间复杂度是 O(mn)</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; uglyNums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The solution for the old problem 263</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k the input of the problem</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the kth ugly number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calcUglyNumber</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        uglyNums.clear();</span><br><span class="line">        uglyNums.add(<span class="number">1L</span>);</span><br><span class="line">        FactorRecord factorTwo = <span class="keyword">new</span> FactorRecord(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        FactorRecord factorThree = <span class="keyword">new</span> FactorRecord(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        FactorRecord factorFive = <span class="keyword">new</span> FactorRecord(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> minVal = Math.min(factorFive.calcCurrentVal(uglyNums),</span><br><span class="line">                    Math.min(factorTwo.calcCurrentVal(uglyNums), factorThree.calcCurrentVal(uglyNums)));</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorTwo.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorTwo.setIndex(factorTwo.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorThree.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorThree.setIndex(factorThree.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorFive.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorFive.setIndex(factorFive.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uglyNums.get(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uglyNums.clear();</span><br><span class="line">        uglyNums.add(<span class="number">1L</span>);</span><br><span class="line">        FactorRecord factorTwo = <span class="keyword">new</span> FactorRecord(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        FactorRecord factorThree = <span class="keyword">new</span> FactorRecord(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        FactorRecord factorFive = <span class="keyword">new</span> FactorRecord(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> k = num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> minVal = Math.min(factorFive.calcCurrentVal(uglyNums),</span><br><span class="line">                    Math.min(factorTwo.calcCurrentVal(uglyNums), factorThree.calcCurrentVal(uglyNums)));</span><br><span class="line">            <span class="keyword">if</span> (minVal == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal &gt; num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorTwo.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorTwo.setIndex(factorTwo.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorThree.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorThree.setIndex(factorThree.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minVal == factorFive.calcCurrentVal(uglyNums)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uglyNums.get(uglyNums.size() - <span class="number">1</span>) != minVal) &#123;</span><br><span class="line">                    uglyNums.add(minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                factorFive.setIndex(factorFive.getIndex() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FactorRecord</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> factor; <span class="comment">// 2, 3, 5</span></span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FactorRecord</span><span class="params">(<span class="keyword">long</span> factor, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.factor = factor;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactor</span><span class="params">(<span class="keyword">long</span> factor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.factor = factor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> factor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calcCurrentVal</span><span class="params">(List&lt;Long&gt; uglyNums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> factor * uglyNums.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">boolean</span> res = solution.isUgly(<span class="number">2144843814</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-64-Minimum-Path-Sum</title>
      <link href="/2025/02/04/problem-64-Minimum-Path-Sum/"/>
      <url>/2025/02/04/problem-64-Minimum-Path-Sum/</url>
      
        <content type="html"><![CDATA[<h1 id="64-Minium-Path-Sum"><a href="#64-Minium-Path-Sum" class="headerlink" title="64. Minium Path Sum"></a>64. Minium Path Sum</h1><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p><p>Note: You can only move either down or right at any point in time.</p><p>Example 1:<br><img src="https://jiamingmai.github.io/2025/02/04/problem-64-Minimum-Path-Sum/fig1.png" alt="例子"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,2,3],[4,5,6]]</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure><br>Constraints:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m &#x3D;&#x3D; grid.length</span><br><span class="line">n &#x3D;&#x3D; grid[i].length</span><br><span class="line">1 &lt;&#x3D; m, n &lt;&#x3D; 200</span><br><span class="line">0 &lt;&#x3D; grid[i][j] &lt;&#x3D; 200</span><br></pre></td></tr></table></figure></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们定义一个和矩阵大小一样的<code>dp</code>数组,它的每个元素表示到达该位置所需要的路径代价,比如<code>dp[i][j]</code>表示.<br>从矩阵最左上角移动到位置<code>[i][j]</code>所需要的路径代价.<br>对于一个给定的矩阵,最左上角的位置<code>[0][0]</code>所需要的路径代价一定等于那个位置自身的值<br>(因为不需要任何移动).</p><p>于是有<code>dp[0][0] = grid[0][0]</code></p><p>在此基础上,我们从左到右,从上到下,一排一排地开始遍历.由于题目规定只能够向下和向右移动,所以通往位置<code>[0][1]</code><br>的路径只能由<code>[0][0]</code>向右移动到达,从而<code>[0][1]</code>的路径代价</p><p><code>dp[0][1] = dp[0][0] + grid[0][1]</code></p><p>对于矩阵第一排的<code>[0][j]</code>的位置,都只能通过从左边移动到达,所以都满足</p><p><code>dp[0][j] = dp[0][j-1] + grid[0][j]</code></p><p>而对于从第二排开始的位置,除了可以从左边移动达到,也可以从上边移动到达.因此,这时候就需要判断<br>从哪个方向移动到达代价最小.于是有</p><p><code>dp[i][j] = Min(dp[i-1][j] + grid[i][j], dp[i][j-1] + grid[i][j])</code></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>算法要遍历整个<code>dp</code>数组,而<code>dp</code>数组的大小和矩阵大小一样,除了第一行和第一列之外,<br>每个位置都需要做两次判断(从左边方向移动达到和从上方移动到达),因此时间复杂度为<code>O(2n*m)=O(n*m)</code></p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>因为使用了一个<code>n * m</code>大小的<code>dp</code>数组,所以空间复杂度为<code>O(n*m)</code></p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> high = grid.length;</span><br><span class="line">        <span class="keyword">int</span> width = grid[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// initialize the dp array</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[high][width];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// update the dp array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmpPathSum = dp[i][j - <span class="number">1</span>] + grid[i][j];</span><br><span class="line">                    <span class="keyword">if</span> (tmpPathSum &lt; dp[i][j]) &#123;</span><br><span class="line">                        dp[i][j] = tmpPathSum;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmpPathSum = dp[i - <span class="number">1</span>][j] + grid[i][j];</span><br><span class="line">                    <span class="keyword">if</span> (tmpPathSum &lt; dp[i][j]) &#123;</span><br><span class="line">                        dp[i][j] = tmpPathSum;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[high - <span class="number">1</span>][width - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-55-Jump-Game</title>
      <link href="/2025/02/04/problem-55-Jump-Game/"/>
      <url>/2025/02/04/problem-55-Jump-Game/</url>
      
        <content type="html"><![CDATA[<h1 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a>55. Jump Game</h1><p>Given an array of non-negative integers nums, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这其实是一个寻找路径判断是否可达的问题，问题本身是一个特殊的有向图，顺着题目给出的 2 个 Example 去思考，会发现正向寻找路径的过程当中，会存在很多重复计算的节点。如下图所示，其中第 3 个和第 4 个节点就被重复计算了，因为有多条路径可以达到第 3 个节点和第 4 个节点。因此，如果直接遍历搜索所有路径的话，肯定超时。根据经验，凡是这种具有重复计算过程的问题，大概率都可以用动态规划来解决，而动态规划问题一般的思考方向都是逆向从尾部开始往前推。</p><p><img src="https://jiamingmai.github.io/2025/02/04/problem-55-Jump-Game/fig1.png" alt="重整化"></p><p>接下来我们就想想如果从尾部开始往前推是否奏效。如下图所示，假设给定的数组长度为 n，那么我们可以知道如果 n=1 时，一定可达（因为出发点跟终点相同，终点就是出发点），所以返回 true。现在我们考虑 n&gt;1 的时候，当 n&gt;1 时，倒数第 2 个节点的值 Xn-1 如果大于 1 时，那么从它就可以到达最后一个节点。对于倒数第 3 个节点，如果它的值 Xn-2 大于 2 的话，那么它也可以直接达到最后一个节点，否则，它后续的 Xn-2 个节点中只要有一个可达最后一个节点，那它也同样能达到最后一个节点，但如果它后续的 Xn-2 个节点里面均没有一个能达到最后一个节点，那么它自身就无法达到最后一个节点。也就是说，如果它自身无法直接到达最后一个节点（即满足 Xn-2&gt;2 这个条件）的话，那么它能否达到最后一个节点就取决于它之后的 Xn-2 个节点是否能达到最后一个节点。以此类推，也由此可见，从数组后方往推（从图中来看就是从下往上）的每个节点对最后一个节点的可达性，都依赖于它后方节点（从图中来看就是下方节点）的可达性。</p><p><img src="https://jiamingmai.github.io/2025/02/04/problem-55-Jump-Game/fig2.png" alt="重整化"></p><p>基于现在我们已有的结论，可以另外开辟一个长度与 nums 相同的数组 flags，专门用于存储每个节点到最后一个节点的可达性，如果可达那么就在数组对应的位置设置为 1，否则设为 0，从后往前开始计算，最终得到 flags 的第一个元素的值，即 flags [0]，如果 flags [0] 为 1，就说明是 1 个节点到最后一个节点是可达的，返回 true，否则返回 0 即可。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>从数组最后往前开始计算，假设数组的长度为 n，那么倒数第 2 个节点要做 1 次比较（判断 Xn-1 是否大于 1），倒数第 3 个节点最多（因为有可能判断 1 次就发现是可达的，就不需要做后续的判断）要做 2 次比较（判断 Xn-2 是否大于 2，以及它后续的 Xn-2 个节点是否可达，因为它本身是倒数第 3 个节点，所以除去最后一个节点之外，它后续最后也只有 1 个节点），如此类推，一共要比较的次数 S=1+2+…+(n-1)，是个等差数列，根据等差数列前 n 项和公式计算得到 S=1/2 (n^2)-n/2，所以最终时间复杂度为 O (n^2)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是 O (n)，因为开辟了一个和数组 nums 一样大小的数组 flags</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[] example1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] example2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] example3 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> canJump = solution.canJump(example1);</span><br><span class="line">        System.out.println(canJump);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] flags = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        flags[nums.length - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">2</span>, k = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (num &gt; k) &#123;</span><br><span class="line">                flags[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> canJump = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = num; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flags[i + j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    canJump = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (canJump) &#123;</span><br><span class="line">                flags[i] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flags[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flags[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem-91-Decode-Ways</title>
      <link href="/2025/02/03/problem-91-Decode-Ways/"/>
      <url>/2025/02/03/problem-91-Decode-Ways/</url>
      
        <content type="html"><![CDATA[<h1 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a>91. Decode Ways</h1><p>You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:</p><p>“1” -&gt; ‘A’</p><p>“2” -&gt; ‘B’</p><p>…</p><p>“25” -&gt; ‘Y’</p><p>“26” -&gt; ‘Z’</p><p>However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (“2” and “5” vs “25”).</p><p>For example, “11106” can be decoded into:</p><p>“AAJF” with the grouping (1, 1, 10, 6)<br>“KJF” with the grouping (11, 10, 6)<br>The grouping (1, 11, 06) is invalid because “06” is not a valid code (only “6” is valid).<br>Note: there may be strings that are impossible to decode.</p><p>Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.</p><p>The test cases are generated so that the answer fits in a 32-bit integer.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">&quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;226&quot;</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">&quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br></pre></td></tr></table></figure><br>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;06&quot;</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">&quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;). In this case, the string is not a valid encoding, so return 0.</span><br></pre></td></tr></table></figure><br>Constraints:</p><p>1 &lt;= s.length &lt;= 100<br>s contains only digits and may contain leading zero(s).</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>一个字符串能否被有效解码可以一般地划分为以下两种情况:</p><ol><li><strong><code>[][][][][][]</code></strong> —&gt; <strong><code>[o][x][x][x][x][x]</code></strong> 判断第一个元素是否有效,并且判断其后的字符串是否有效</li><li><strong><code>[][][][][][]</code></strong> —&gt; <strong><code>[o][o][x][x][x][x]</code></strong> 判断前两个元素是否有效,并且判断其后的字符串是否有效</li></ol><p>上述两种情况下,只要有一种情况成立,那么这个字符串就可以被有效解码. </p><p>对于情况1自身而言,如果这种情况下能被有效解码,那么整个字符串可以被解码的方式数量应该等于<code>[x][x][x][x][x]</code>这个字符串可以被解码的方式数量.<br>注意到<code>[o]</code>能够被有效解码只是让整个字符串也能够有效解码,并没有增加解码方式的数量.</p><p>同样地,对于情况2自身而言,如果这种情况下能够被有效解码,那么整个字符串可以被解码的方式数量应该等于<code>[x][x][x][x]</code>这个字符串可以被解码的方式数量.<br>注意到<code>[o][o]</code>能够被有效解码只是让整个字符串也能够有效解码,并没有增加解码方式的数量.</p><p>然而,情况1和情况2两者之间的解码方式数量是可以叠加的,因为它们之间没有交集.因此,我们可以根据这样的规律来写出动态规划方程:</p><p>假设array数组中的元素表示从该位置之后截取的字符串的解码方式数量,比如array[i]表示字符串str的substring(i)对应的解码方式数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if isValid(str[i]) &amp;&amp; array[i+1] !&#x3D; 0 </span><br><span class="line">array[i] &#x3D; array[i] + array[i+1]</span><br><span class="line"></span><br><span class="line">if isValid(str[i:i+1] &amp;&amp; array[i+2] !&#x3D; 0</span><br><span class="line">array[i] &#x3D; array[i] + array[i+2]</span><br></pre></td></tr></table></figure><br>现在考虑数组的初始化问题,如果只考虑一个只有一个字符的字符串,那么这么字符串能否被有效解析,就只取决于这个字符本身.我们只需要判断这个字符就可以知道了.<br>在这种情况下,输出的结果要么为0要么为1.随后只需要根据动态规划方程往下迭代即可获得整个数组每个元素的值,而<code>array[0]</code>就是我们期望的输出.</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>从数组的最后一个元素开始往前遍历,最后一个元素和倒数第二个元素都只需要做1次比较,从倒数第三个元素开始,需要做2次比较.因此总体时间复杂度为O(2n)=O(n)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是O(n),因为开辟了一个大小为字符串长度的数组array</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String mainStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[mainStr.length()];</span><br><span class="line">        <span class="keyword">int</span> i = mainStr.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (mainStr.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">            array[i] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mainStr.charAt(j) != <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String subStr = mainStr.charAt(j) + <span class="string">""</span> + mainStr.charAt(j + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (isValid(subStr)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">2</span> &lt;= mainStr.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (array[j + <span class="number">2</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">                        array[j] += array[j + <span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    array[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(<span class="number">0</span>) == <span class="string">'0'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span> || num &gt; <span class="number">26</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"226"</span>));</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"1201234"</span>));</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"10"</span>));</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"12"</span>));</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"06"</span>));</span><br><span class="line">        System.out.println(solution.numDecodings(<span class="string">"27"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode-Dynamic-Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《非对称风险》读书笔记</title>
      <link href="/2023/04/30/%E3%80%8A%E9%9D%9E%E5%AF%B9%E7%A7%B0%E9%A3%8E%E9%99%A9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/30/%E3%80%8A%E9%9D%9E%E5%AF%B9%E7%A7%B0%E9%A3%8E%E9%99%A9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="这本书在讨论什么？"><a href="#这本书在讨论什么？" class="headerlink" title="这本书在讨论什么？"></a>这本书在讨论什么？</h2><p>紧随塔勒布的上一部作品《黑天鹅》，我们不禁想提问到底是什么样的原因触发了”黑天鹅”事件？答案正是本作的书名”<strong>非对称风险</strong>“。在生活和社会中充满了非对称现象，而这些风险的聚集和积累导致了”黑天鹅”事件在某个时间点的爆发。</p><h2 id="什么是非对称风险？"><a href="#什么是非对称风险？" class="headerlink" title="什么是非对称风险？"></a>什么是非对称风险？</h2><p>首先社会总体是存在着风险的，以往人们总认为社会的风险是均匀地积累和分布的，即每个人对自己的行为都要承担相应的风险，同时也会享受到这个风险所对应的回报。但问题在于，社会中真实的风险并非均匀分布，并非每个人做了有风险的事情后，都由其本人或组织来承担这个风险。比如，银行的放贷人只拿固定的薪资，而无视所发放贷款的质量，尽管他知道这笔贷款存在风险，但这与其所拿的工资和提成无关。尤其是对于一些长期的贷款，等风险暴露的时候（也就是”黑天鹅”事件出现的时候），他早就赚够了从银行系统里离开了。</p><h2 id="为什么存在这么多非对称风险现象？"><a href="#为什么存在这么多非对称风险现象？" class="headerlink" title="为什么存在这么多非对称风险现象？"></a>为什么存在这么多非对称风险现象？</h2><h3 id="1-信息不对称性"><a href="#1-信息不对称性" class="headerlink" title="1. 信息不对称性"></a>1. 信息不对称性</h3><p>社会中拥有更多信息的一方知道如何隐藏关键的信息会对自身有利。因此，拥有更多信息的一方，容易从拥有更少信息的一方中获利，甚至对其实行欺诈。</p><h3 id="2-权利和责任存在不对称性"><a href="#2-权利和责任存在不对称性" class="headerlink" title="2. 权利和责任存在不对称性"></a>2. 权利和责任存在不对称性</h3><p>社会中很多有权力的人和集体在做事的时候可以只顾及自身的利益，而完全不用承担相应的责任。比如西方国家动用强权去干涉别国内政，最后把别的国家弄得混乱不堪，自己却全身而退。越是社会上层的人和集体，就越容易滋生出这种情况，以至于社会底层出现劳动和劳动成果相分离。越是复杂的系统和流程，越容易滋生出这种权责不对称的现象。</p><h3 id="3-少数派主导现象"><a href="#3-少数派主导现象" class="headerlink" title="3. 少数派主导现象"></a>3. 少数派主导现象</h3><p>一个群体往往由不妥协的少数派（3%-4%）主导规则，该现象称之为“少数派主导现象”，这个现象由两个主要因素构成：</p><ol><li>人口的空间分布。顽固的少数派并非集中分布在某一个区域，而是分散在人群中。如果集中分布则不易出现少数派主导现象。</li><li>成本。满足少数派的成本低廉时容易产生少数派主导现象。</li></ol><p>少数派主导下推行的规则在执行中往往更稳定，不同的人在执行这些规则时的差异非常小，而且能够使得原本孤立不相关的群体都默契地执行同一条规则。少数派主导下产生的规则都是非黑即白和二元对立的。</p><h4 id="重整化现象是少数派主导的原因"><a href="#重整化现象是少数派主导的原因" class="headerlink" title="重整化现象是少数派主导的原因"></a>重整化现象是少数派主导的原因</h4><p>现在假设每一个正方形就是一个四口之家，家里的女儿是一个顽固的少数派，她只吃非转基因食品（或有机食品）。由于她的坚持和抵制，家庭其他成员都被她改造过来了，他们现在也只吃非转基因食品。当这一家子参加邻居的烧烤派对时，邻居为了照顾他们的偏好，不得不全部采购非转基因食品；接着，本地的超市就会发现当地居民的饮食习惯偏向于非转基因食品，于是供应的食品也相应调整；最后，大型食品批发公司为了适应这种变化，简化自己的业务流程，全部转向了非转基因食品。这个过程，就是<strong>重整化</strong>。</p><p><img src="https://jiamingmai.github.io/2023/04/30/《非对称风险》读书笔记/renormalization.png" alt="重整化"></p><p>上图中，从上到下包括了三组正方形，每一组里面包含了4个正方形。请想象一下，每个正方形里面又包含了4个小的正方形。重整化的规则是只要有1个正方形是深色的，那么与其相邻的其他正方形也会变成深色。由此，只要三步，就能把全部的正方形变成深色。请把图1中深色的正方形想象成顽固少数派，把浅色的正方形想象成温和多数派，“重整化”帮助我们演示了少数派主导现象。</p><p>重整化展示的核心意思是非对称的“否决权”效应，即群体中的某个人可以用反复否决其他人偏好的办法来最终使得群体内其他具有适度灵活性的成员接受他的选择。宗教、道德和饮食偏好因“重整化”机制而广泛传播。</p><p>一些企业的成功并不是因为它们提供了优质的产品，而仅仅是因为它们没有被某特定的社会群体否决。比如麦当劳：当你在陌生环境中面临仅有的几个选择时，尤其当你知道这些地方的食品安全监管体系并不可靠，而且食品安全问题频发的时候，麦当劳似乎就成了你最安全的选择。</p><p>另外值得一提的是，基因遵循多数派主导的规律，而语言则遵循少数派主导的规则。语言行走四方，基因落地生根。</p><h4 id="少数派主导现象的例子"><a href="#少数派主导现象的例子" class="headerlink" title="少数派主导现象的例子"></a>少数派主导现象的例子</h4><p><em>例子1</em>：<br>自动挡汽车的普及并非因为多数人喜欢开自动挡汽车，真正的原因是会开手动挡的人也一定会开自动挡的汽车，反之则不然。</p><p><em>例子2</em>：<br>当今社会的道德并非是由大多数人的共识演变而来的，而是由社会中那些最顽固的少数派把他们所推崇的道德强加给了社会，又因为少数派的极端不容忍，最终成了全社会普遍接受的美德。同样，公民权利也是通过这样的途径争取来的。</p><p>道德标准一旦被建立起来，只需要满足几个条件就足以在全社会维护整个道德体系：（1）极小部分人对道德禁止的事情极为厌恶，对道德提倡的事情极为热衷；（2）这一小部分约占总人口的3%~4%；（3）这部分人永不妥协，极为固执；（4）这部分人平均分布在社会的各个阶层和国家的各个地区。</p><p><em>例子3</em>:<br>科学探索其实是一个由少数派主导的过程。科学并不是科学家思想的总和，而是如市场一样，充满了固执的偏见，一旦某领域的真相被揭示以后，我们才突然发现我们以前掌握的都是错的。如果科学探索奉行多数人共识的原则，我们现在就可能还在中世纪，爱因斯坦可能终其一生都是一个“有爱好，没成果”的专利局职员。</p><p><em>例子4</em>:<br>革命是由偏执的少数派推动的，整个社会的进步，无论是在经济还是道德层面上，都源于一小部分人的推动。</p><h2 id="如何避免和应对非对称风险？"><a href="#如何避免和应对非对称风险？" class="headerlink" title="如何避免和应对非对称风险？"></a>如何避免和应对非对称风险？</h2><p>答案是”风险共担”，”风险共担”是指一个人或一个集体要为其言论和行为负责。要判断一个人或者一个集体的言论和行为是否可靠，需要判断其是否做到了“风险共担”。每个人积极坚持参与风险共担，以降低社会的整体非对称风险。当一些没有参与到共享共担的人给出建议时，听取时要尽量谨慎，这些人往往是制造非对称风险的人。</p><h3 id="“林迪效应”的作用"><a href="#“林迪效应”的作用" class="headerlink" title="“林迪效应”的作用"></a>“林迪效应”的作用</h3><p>在”风险共担”的前提下，”林迪效应”会帮我们筛选掉一部分风险。 林迪效应（Lindy effect）是指，对于一些不会自然消亡的事物，比如一种技术、 一种思想，它们的预期寿命和它们目前已经存在的时间成正比。即它每多生存一段时间，它的剩余预期寿命就会增加一点。</p><p>时间是相当无序的。我们把抗争时间带来的无序性视为一场光荣的战斗，称之为生存，其实它就是我们应对无序状态、处理混乱事件的能力。脆弱的东西对波动性和其他压力源有着非对称性的反应， 会从中受害而非受益。从概率论上讲，波动和时间是一回事情。因此，引进“脆弱性”这个概念可以帮助我们牢固树立这样一个理念， 即检验一切事物最有效的手段是时间。这里讲的事物可以指观点、人、知识、汽车模型、科学理论和书籍等。因此，经得起时间考验的东西，往往风险更低。</p><h3 id="利用”林迪效应”的例子"><a href="#利用”林迪效应”的例子" class="headerlink" title="利用”林迪效应”的例子"></a>利用”林迪效应”的例子</h3><p>如果一个人看起来不像是干这一行的，却又在这一行干了很长时间，这说明他需要比别人克服更多的困难，这种困难来自病人以貌取人的天然倾向带给他的不信任感，他一定是用卓越的医术成功地扭转了别人对自己不利的第一印象，否则他早就被淘汰了，根本干不了这么久。 所以，我们应该感谢“风险共担”的作用：时间和现实联手帮我们过滤掉了那些能力不足的人，而时间和现实并不在乎长相。尽管外貌和能力之间可能存在着某种相关关系（那些看起来像运动员的人，可能就是运动员），但是那些看起来不像干这行的人，如果还是在这个行业生存下来并获得了一些成功，那么这里面就包含着极有说服力的关键信息。</p><h3 id="提高自身”反脆弱性”来应对”非对称风险”"><a href="#提高自身”反脆弱性”来应对”非对称风险”" class="headerlink" title="提高自身”反脆弱性”来应对”非对称风险”"></a>提高自身”反脆弱性”来应对”非对称风险”</h3><p>如果我们严格定义什么是<strong>脆弱</strong>，那么它是指”对外部压力源呈现非线性反应”。对一只猫头鹰瓷器施加一个外力，它可能没有什么变化；但当外力达到陶瓷材料本身的破裂点时，它就会突然破裂。这就意味着强烈的外部冲击力对其造成的影响远大于微小的冲击力所造成的影响，而且这两种影响的程度与所受外力的大小极不成比例。</p><p>要加强自身应对”非对称风险”的能力，就要提高自身的”反脆弱性”，关于如何提提高”反脆弱性”，要阅读塔勒布的一部前作《<strong>反脆弱性</strong>》。</p><h2 id="对待风险的一些建议"><a href="#对待风险的一些建议" class="headerlink" title="对待风险的一些建议"></a>对待风险的一些建议</h2><h3 id="风险较小时多尝试"><a href="#风险较小时多尝试" class="headerlink" title="风险较小时多尝试"></a>风险较小时多尝试</h3><p>如果某些错误的代价（风险）较小，主动去犯这些错误反而是理性的做法，因为错误会给你带来新的发现。例如，许多药物都是意外被“发现”的。一个没有错误的世界就不会有盘尼西林、化疗……可能没有药物，甚至可能没有人类。（不过现实中我们往往无法判断错误的代价，所以我认为只有在我们比较确定错误的代价时，才能这种做）</p><p><img src="https://jiamingmai.github.io/2023/04/30/《非对称风险》读书笔记/bias_vs_variance.png" alt="偏差与方差"></p><p>假设有两个人在得克萨斯州射击。左边的射手有偏差，而且这是一个系统性的偏差，但总的来说，左边的射手比右边的更接近靶心。右边的射手没有系统性的偏差，但有很高的方差。通常，这两者此消彼长，你不能同时缩小方差并修正偏差。如果你面临重大选择且极度缺乏灵活选项，比如，两个得克萨斯州牛仔举枪对射，那么你宁可自己是左边的射手，这样才能远离毁灭。换句话说，面临一个危险时，修正偏差比缩小方差容易得多。如果你是飞机设计师，那么你宁可犯左图的错误，也不要犯右图的错误，要尽可能地降低你设计的各部件性能的方差，这样才能最大限度地减少飞机坠毁的可能性。只有做到了这一点，你才能在事故之后免受惩罚。</p><h3 id="分析和决策时要考虑和保证”遍历性”"><a href="#分析和决策时要考虑和保证”遍历性”" class="headerlink" title="分析和决策时要考虑和保证”遍历性”"></a>分析和决策时要考虑和保证”遍历性”</h3><p><strong>遍历性</strong>是指一个随机过程的历史概率总是适用于其未来的情景。换句话说，如果有一个随机过程，其过往的历史概率不能适用于其未来的情景，那么这个随机过程就不具有<strong>遍历性</strong>。 出现上述情况是因为系统存在一个类似于“叫停”的机制，这其实就是一个有<strong>吸收壁</strong>的随机过程，参与这样一个随机过程的“风险共担”就意味着一旦被吸收壁吸收，你就不能回到随机过程中继续游戏了。</p><p>由于不存在任何可逆性，我们将这种情况称为“爆仓”。这里的核心问题是一旦存在“爆仓”的可能性，那么成本收益分析就变得毫无意义了。下面举例说明。</p><p><em>例子1</em>：<br>现在来思考这样一个思维游戏。首先在第一种情形下（如图4中的漫画所示），100个人在某特定时间段内携带固定数量的钱去赌场。这些人当中有的可能会赔钱，有的可能会赚钱。我们只需要计算一下回来的人口袋里剩下的钱，就可以计算出他们的总体收益，进而计算出赌场对赔率的定价是否合理。假设一天玩下来，第28号赌徒爆仓（赔光）了，第29号赌徒会受到影响吗？答案显然是否定的。你根据这个样本可以很容易地计算出其中大约有1%的赌徒会爆仓，如果一直重复这个过程，你会得到与之前相同的比值，即在同一时间段内，平均有1%的赌徒爆仓。</p><p>现在我们来看一下这个思维游戏里面的第二种情形。假设你的表弟从固定的金额开始，连续100天去赌场下注。在第28天的时候，你的表弟不幸爆仓了，那么对于他而言，还会有第29天吗？不会有了，因为他触发了自己的“爆仓点”，在游戏中他已经永久地出局了。</p><p>上面的例子说明第二种情形不存在”遍历性”，无论你的表弟赌技多么高超，行事多么谨慎，你可以肯定的是只要他一直赌下去，就一定会爆仓。</p><p>100个赌徒在1天时间里的成功概率，并不适用于你表弟在100天时间里的赌运。我们把第一种情形称为<strong>集合概率</strong>，第二种情形称为<strong>时间概率</strong>（第一种情形涉及的是一群人，而第二种情形则涉及一个人穿越一系列时间）。所以当你在阅读金融学教授、投资大佬或者当地银行根据市场长期回报提出的投资建议时（基于<strong>集合概率</strong>的建议），你一定要格外小心。即使他们的预测是对的（其实不一定对），个人也无法获得与市场相同的回报，除非他有源源不断的资金可以注入市场，而且不存在“爆仓点”。如果有人认为自己能够取得和市场相同的回报水平， 那么他犯了这样一个错误：混淆了集合概率与时间概率。投资人要么是出现损失以后本金减少（以后追不上指数上涨了），无论出现哪种情况，此投资人的回报都会低于市场总体回报水平。</p><p><em>例子2</em>：假设有一群人在玩俄罗斯轮盘赌，单次获胜的奖金是100万美元，每6个人中有5个人可以获胜，如果有人用标准的成本收益模型来分析，那么他很可能会得出结论，声称参与游戏的人有83.33%的机会赢得奖金，因为每次平均收益是83.33万美元。但是如果你不停地玩这个游戏，最终的结局一定是躺在坟墓里，这时候你的预期收益还能作数吗？</p><h4 id="保证”遍历性”的例子"><a href="#保证”遍历性”的例子" class="headerlink" title="保证”遍历性”的例子"></a>保证”遍历性”的例子</h4><p>站在信息论立场的索普、凯利和香农则认为，为了使某项投资策略实现遍历性并最终跟上指数的收益，代理人应当在盈利的时候采取激进策略追加投资，而在遭受损失的时候采取保守策略缩减投资，这个方法被称为“赌场盈利效应”。在实践中，这种方法是通过事先设定的阈值来实现的，其目的是便于操作。阈值的概念并不复杂：盈利突破某一事先设定的阈值水平时，你就选择更加积极地下注；当你开始损失并跌破阈值时，你就减少下注金额，就好像有一个开关在控制你的下注金额一样。事实上，证券市场上几乎所有活下来的交易员都是这样做的。</p><h2 id="书中一些很有感染力的观点"><a href="#书中一些很有感染力的观点" class="headerlink" title="书中一些很有感染力的观点"></a>书中一些很有感染力的观点</h2><ol><li>通过负面去认识事物：相对于判断什么是有利的，我们更清楚什么是不利的；相对于什么是正确的，我们更容易知道什么是错误的。</li><li>能够成功地创立一个好公司的人，和能够成功地把一个公司卖出好价钱的人，一定是两种完全不同的人。</li><li>现代化进程使得一切事物变得越来越专业化，进而使得理论诞生的假设环境和其应用的实际场景之间的偏差会越来越大。</li><li>很多从业者（诸如设计和建筑行业）总是为了震撼同行或得到同行的认可，而不是他们真正的用户。</li><li>去中心化会极大地降低系统的不确定性。</li><li>市场像一个巨大的电影院，但出口很窄。</li><li>一头狮子带领的一群羊要比一只羊带领的一群狮子战斗力强得多。</li><li>复杂系统之所以复杂，是因为它无法通过系统部件的功能和状态来预测系统的行为。不同部件之间的互动比其最初设计的功能更加重要。研究单只蚂蚁的行为永远不可能揭示整个蚂蚁帝国的运作模式。这是因为，我们要把蚂蚁作为一个整体来研究，而不是拆分成个体，或者将其视作个体的简单组合来研究。部件之间的相互关系和互动机制——尽管这种互动往往遵循着简单的规则，是系统整体最重要的特征。</li><li>你天然会捍卫属于你的东西，但只有你能够捍卫的东西，它们才真正属于你。</li><li>真正重要的不是一个人有或没有什么，而是他害怕失去什么。你潜在的损失越大，你就越脆弱。</li><li>正向设计比反向设计容易。</li><li>真正的平等是概率上的平等，只有“风险共担”能防止系统崩溃。</li><li>动态的平等就是要重建遍历性，从而使得概率在时间和空间上的分布可以相互替代。</li><li>概率论、统计学和大数据分析的核心不是数据，而是基于观测得出的逻辑——尤其当观测数据不足时，逻辑就至关重要了。在很多情况下，真正有用的仅仅是几个极端数据；极端数据很少出现，而一旦出现，它们就带来巨大的信息量，并足够让你证明（或者证伪）某个观点。</li><li>当一个人的命运不依赖于同行评议时，他才是一个真正自由的人。一个真正自由的人从不试图赢得一场辩论，他只追求赢得胜利。</li><li>只有当你在乎未来人们对你的评价时，人们当前对你的评价才是重要的。</li><li>任何东西一旦带有竞赛的意味，就会扼杀对知识的探索。</li><li>在林迪效应下，一个事物需要由时间来检验其强韧性，也就是说，要把一个事物置于有风险的情况下检验相当长的一段时间，其最终的生存状况就是最终检验的结果。如果做这件事情的人在做的过程中承担了某种风险，这个事情成功地穿越了几代人之后继续运转自如，那么这个事物就是合格的。</li><li>在任何交易活动中，你都不必去挖掘隐藏的细节信息，真正有用的信息只会通过林迪效应显露出来。</li><li>那些表述得很清晰、很准确、连傻子都能理解的信息，恰恰就是傻子们的陷阱。</li><li>资金从来就不是困扰真正的企业家和科学家的瓶颈问题。无论是创造一个好企业，还是实现一个科学上的突破，其背后主要的推动力量从来都不是资金。你可以用钱买一家好公司，但你无法用钱创立一家好公司；你可以用钱买一项科研成果，但你无法用钱获得一项科学发现。</li><li>一个人只有经历了长期的投资生涯之后，才能总结出一种独特的思想，当他用自己的语言把这种思想表达出来的时候，旁人仅凭语言很难理解他。</li><li>永远不要雇用一个搞学术研究的人，除非你只想让他写论文和参加考试。</li><li>社会进步并非是由高水平的教育机构推动的，恰恰相反，一个国家的教育水平是由居民财富水平决定的（从这个意义上讲，教育就是一种奢侈的消费）。</li><li>事实上，人们可以将一个和谐友爱的社区定义为一个消除了竞争机制和等级制度的空间集合，在那里，集体的利益超越了个人的利益。</li><li>一个不可靠的人传播的信息量比可靠的人要少，因为你无法欺骗一个人两次。</li><li>你永远都无法解决系统本身的结构性缺陷，系统会自己解决：先是崩溃，然后自己纠正。</li><li>俄罗斯概率学派提醒人们要从单边不对等的角度去思考数据隐含的意义：缺失的数据也应该被考虑。记录中没有黑天鹅，并不意味着它不存在。记录是不充分的，这种不充分所包含的非对称性应该永久地体现在人们的分析中。</li><li>当问题停留在思考层面的时候，思考过程需要有一定程度的扭曲，这样才能产生解决问题的动力。</li><li>你愿意为一个事物承担多大的风险，揭示了你对该事物的信任程度。</li><li>事情的发生未必都是有起因的，但事物能幸存下来必定是有原因的。</li><li>在爆仓风险面前，成本收益分析变得微不足道。</li><li>把一群没有真知灼见的人聚集在一起，即使人数再多也不会产生真知灼见。</li><li>整体系统的稳定性有赖于系统各部分的脆弱性（假设它们是可再生、可替代的）。如果人类可以长生不老，那么我们可能会因为一次突发的外部灾难，或者我们自身累积的不适应性突然爆发而导致人类的集体灭绝。所以，只有当人类个体的生命较短（也较脆弱）的时候，人类才可能在代际间实现基因变异以适应周围环境的变化，从而以个体的脆弱性换取整体的强韧性。</li></ol><h3 id="书中有关”忌妒”的观点："><a href="#书中有关”忌妒”的观点：" class="headerlink" title="书中有关”忌妒”的观点："></a>书中有关”忌妒”的观点：</h3><ol><li>忌妒只会发生在相邻的阶层，而不会穿越多个阶层。对财富的忌妒并不是源自穷人，穷人只关心如何改善自己的生活，这种忌妒源自有较高社会地位的阶层。</li><li>你更有可能在你的亲友中遭到忌妒：底层的人可能对他们的表亲或中产阶级产生忌妒，而不太可能对富裕阶层产生忌妒。</li><li>忌妒是一种具有领地属性的情绪。</li><li>忌妒只在同一行业、相近天赋和相同条件下产生。</li><li>忌妒的反面是共情（将感情推己及人的做法）。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
